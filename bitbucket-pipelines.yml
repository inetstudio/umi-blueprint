image: bitnami/git

.sentry_project: &sentry_project_anchor |
  export SENTRY_PROJECT_BACKEND=PROJECT-backend
  export SENTRY_PROJECT_FRONTEND=PROJECT-frontend

.git_deploy_paths: &deploy_paths_anchor |
  export DEV_HOST=inet.digital
  export DEV_PATH=/var/www/PROJECT.inet.digital/
  export PROD_HOST=
  export PROD_PATH=

.env_exports: &env_anchor |
  export USER=$(cat public/env/user)
  export HOST=$(cat public/env/host)
  export SSH_PATH=$(cat public/env/path)
  export DEP_MODE=$(cat public/env/dep_mode)
  export ASSETS_PATH=templates/PROJECT/public/js/

definitions:
  steps:
    - step: &versioned
        name: Make deploy version
        script:
          - apt-get -y install tzdata
          - export VERSION=$(TZ=":Europe/Moscow" date +v%y.%-m.%-d%-H%M)
          - printf $VERSION > public/release
        artifacts:
          - public/release
    - step: &tagging
        name: Make a tag from deploy version
        script:
          - apt-get update && apt-get install -y git
          - export VERSION=$(cat public/release)
          - git tag -a ${VERSION} -m "Build ${BITBUCKET_BUILD_NUMBER}"
          - git push origin --tags
    - step: &define-variables
        name: Define environment variables based on the current branch
        script:
          - *deploy_paths_anchor
          - if [ $BITBUCKET_BRANCH == "production" ]; then
          -   export USER=$PROD_USERNAME
          -   export HOST=$PROD_HOST
          -   export SSH_PATH=$PROD_PATH
          -   export DEP_MODE="init -v --insecure"
          - else
          -   export USER=$SELECTEL_USERNAME
          -   export HOST=$DEV_HOST
          -   export SSH_PATH=$DEV_PATH
          -   export DEP_MODE="init -v --insecure"
          - fi
          - mkdir -p public/env
          - printf $USER > public/env/user
          - printf $HOST > public/env/host
          - printf $SSH_PATH > public/env/path
          - printf '%s' "$DEP_MODE" > public/env/dep_mode
        artifacts:
          - public/env/**
    - step: &deploy-ssh
        name: Deploy to server via GIT through SSH protocol
        deployment: test
        script:
          - *env_anchor
          - apt-get update && apt-get -qq install git-ftp
          - ssh-keygen -y -f /opt/atlassian/pipelines/agent/ssh/id_rsa > id_rsa.pub
          - git ftp ${DEP_MODE} --user $USER --key /opt/atlassian/pipelines/agent/ssh/id_rsa --pubkey /opt/atlassian/pipelines/agent/build/id_rsa.pub sftp://$HOST$SSH_PATH
          - apt-get install libev-dev -y
          - pipe: atlassian/ssh-run:0.3.1
            variables:
              SSH_USER: $USER
              SERVER: $HOST
              COMMAND: 'cd ${SSH_PATH}; bash ./deploy-out.sh'
              ENV_VARS: >-
                BRANCH=${BITBUCKET_BRANCH}
                ENVS_PATH=${ASSETS_PATH}
    - step: &deploy-assets
        name: Deploy to server via SCP using SSH credentials
        script:
          - *env_anchor
          - pipe: atlassian/scp-deploy:0.3.12
            variables:
              USER: $USER
              SERVER: $HOST
              REMOTE_PATH: '${SSH_PATH}${ASSETS_PATH}'
              LOCAL_PATH: '${ASSETS_PATH}*'
              DEBUG: 'true'
    - step: &build-assets
        name: Build assets
        image: node:15
        script:
          - apt-get update && apt-get install -y git
          - cd templates/PROJECT/
          - npm install
          - npm run $BITBUCKET_BRANCH
        artifacts:
          - templates/PROJECT/js/**
    - step: &sentry
        name: Sentry Release & Deploy
        image: getsentry/sentry-cli
        script:
          - *sentry_project_anchor
          - if [ $BITBUCKET_BRANCH == "production" ]; then
          -   export SENTRY_ENV="production"
          -   export VERSION=$(cat public/release)
          -   export SENTRY_VERSION=$VERSION-$VERSION_POSTFIX
          - else
          -   export SENTRY_ENV="test"
          -   export SENTRY_VERSION=$BITBUCKET_COMMIT
          - fi
          - sentry-cli releases -o "${SENTRY_ORG}" new -p "${SENTRY_PROJECT_BACKEND}" -p "${SENTRY_PROJECT_FRONTEND}" "${SENTRY_VERSION}"
          - sentry-cli releases -o "${SENTRY_ORG}" set-commits --auto "${SENTRY_VERSION}"
          - sentry-cli releases -o "${SENTRY_ORG}" finalize "${SENTRY_VERSION}"
          - sentry-cli releases -o "${SENTRY_ORG}" deploys "${SENTRY_VERSION}" new -e "${SENTRY_ENV}"
pipelines:
  branches:
    production:
      - step: *versioned
      - step: *define-variables
      - step:
          <<: *deploy-ssh
          deployment: production
      - step: *build-assets
      - step: *deploy-assets
      - step: *sentry
      - step: *tagging
    dev:
      - step: *define-variables
      - step: *deploy-ssh
      - step: *build-assets
      - step: *deploy-assets
      - step: *sentry