# This is an I-Net UMI workflow that is triggered by automation
name: Deployment workflow

# Environment variables
env:
  DEV_HOST: inet.{studio}|{digital}
  DEV_PATH: /var/www/*PROJECT*.inet.{studio}|{digital}/
  PROD_HOST: --
  PROD_PATH: --
  ASSETS_PATH: ./templates/*PROJECT*/public/
  SLACK_CHANNEL_ID: ''
  SENTRY_PROJECT: #sentry-project-id

on:
  push:
    branches:
    - dev
    - production

jobs:
  define-variables:
    name: Define environment variables based on the current branch
    runs-on: ubuntu-latest

    # Map a step output to a job output
    outputs:
      HOST: ${{ steps.variables.outputs.HOST }}
      SSH_PATH: ${{ steps.variables.outputs.SSH_PATH }}
      SENTRY_ENV: ${{ steps.variables.outputs.SENTRY_ENV }}
      SENTRY_VERSION: ${{ steps.variables.outputs.SENTRY_VERSION }}

    steps:
      - name: Make deploy version
        if: github.ref_name == 'production'
        id: version
        run: |
          export DEP_VERSION=$(TZ=":Europe/Moscow" date +v%y.%-m.%-d%-H%M)
          echo "DEP_VERSION=$DEP_VERSION" >> $GITHUB_OUTPUT

      - name: Store variables in outputs
        id: variables
        run: |
          if [[ ${{ github.ref_name }} == 'production' ]]; then
            echo "HOST=$PROD_HOST" >> $GITHUB_OUTPUT
            echo "SSH_PATH=$PROD_PATH" >> $GITHUB_OUTPUT
            echo "SENTRY_ENV=production" >> $GITHUB_OUTPUT
            echo "SENTRY_VERSION=${{ steps.version.outputs.DEP_VERSION }}-$SENTRY_PROJECT" >> $GITHUB_OUTPUT
          else
            echo "HOST=$DEV_HOST" >> $GITHUB_OUTPUT
            echo "SSH_PATH=$DEV_PATH" >> $GITHUB_OUTPUT
            echo "SENTRY_ENV=test" >> $GITHUB_OUTPUT
            echo "SENTRY_VERSION=${{ github.sha }}" >> $GITHUB_OUTPUT

            if [[ ${{ github.ref_name }} =~ 'env/' ]]; then
              export BRANCH=$(echo "${{ github.ref_name }}" | sed -e 's#^.*/##')
              echo "SSH_PATH=$DEV_PATH$BRANCH.$DEV_DOMAIN/" >> $GITHUB_OUTPUT
            fi
          fi

  deploy-ssh:
    name: Deploy to server using rsync
    runs-on: ubuntu-latest
    needs: define-variables
    steps:
      - name: Trust git directory
        run: git config --global --add safe.directory /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}

      - name: Get latest code
        uses: actions/checkout@v3
        with:
          fetch-depth: 10

      - name: rsync deployments
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: -lrc --chmod=g=rwx --verbose --progress --exclude-from=".git-ftp-ignore" --exclude=".git*"
          remote_host: ${{ needs.define-variables.outputs.HOST }}
          remote_path: ${{ needs.define-variables.outputs.SSH_PATH }}
          remote_user: ${{ secrets.deploy_user }}
          remote_key: ${{ secrets.deploy_key }}

      - name: Executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        env:
          BRANCH: ${{ github.ref_name }}
          ENVS_PATH: $ASSETS_PATH
        with:
          host: ${{ needs.define-variables.outputs.HOST }}
          username: ${{ secrets.deploy_user }}
          key: ${{ secrets.deploy_key }}
          port: 22
          envs: BRANCH,ENVS_PATH
          script: |
            export BRANCH=$BRANCH
            export ENVS_PATH=$ENVS_PATH
            cd ${{ needs.define-variables.outputs.SSH_PATH }}
            bash ./deploy-out.sh

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ env.SENTRY_PROJECT }}
        with:
          environment: ${{ needs.define-variables.outputs.SENTRY_ENV }}
          version: ${{ needs.define-variables.outputs.SENTRY_VERSION }}

  build-and-deploy-assets:
    name: Build and deploy assets to server using SSH
    runs-on: ubuntu-latest
    needs: define-variables
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Build assets
        run: |
          yarn install
          npm run ${{ github.ref_name }}

      - name: Create .ssh variables
        run: |
          mkdir -p ~/.ssh/
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "${{ secrets.deploy_key }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy assets
        env:
          HOST: ${{ needs.define-variables.outputs.HOST }}
          SSH_PATH: ${{ needs.define-variables.outputs.SSH_PATH }}
        run: cd $ASSETS_PATH && rsync -e "ssh -i $HOME/.ssh/id_rsa -o StrictHostKeyChecking=no"
          -lrc --chmod=g=rwx --compress --delete . ${{ secrets.deploy_user }}@$HOST:$SSH_PATH$ASSETS_PATH

  slack-notifications:
    name: Send status notification to Slack after all the jobs are finished
    runs-on: ubuntu-latest
    needs: [deploy-ssh, build-and-deploy-assets]
    if: always()
    steps:
      - uses: inetstudio/github-to-slack-action@v1.3.2
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
        env:
          FAILED_RUN: ${{ contains(needs.*.result, 'failure') }}